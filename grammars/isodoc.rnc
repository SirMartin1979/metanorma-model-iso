# instantiations of this grammar may replace leaf strings
# with more elaborated types; e.g. title (text) replaced with
# title-main, title-intro, title-part; type replaced with
# enum.
#
# some renaming at leaf nodes is permissible
#
# obligations can change both from optional to mandatory,
# and from mandatory to optional; optional elements may
# be omitted; freely positioned alternatives may be replaced
# with strict ordering
#
# DO NOT introduce a namespace here. We do not want a distinct namespace
# for these elements, and a distinct namespace for any grammar inheriting
# these elements; we just want one namespace for any child grammars
# of this.

grammar {

include "biblio.rnc" {

status =
  element status { ( "proposal" | "working_draft" | "committee_draft" | "draft_standard" |
                     "final_draft" | "published" | "withdrawn" ) }

}

start = standard-document

standard-document =
element standard-document {
  bibdata, version?, preface?, sections, annex*, references*
}

bibdata =
  element bibdata { BibData }

version =
  element version {
    vedition?, revision-date?, draft*
}

vedition = element edition { xsd:int }
revision-date = element revision-date { xsd:date }
draft = element draft { text }

preface =
  element preface { content+ }

sections =
  element sections {
    ( content | clause | terms | definitions )+
}

definitions =
  element definitions {
    attribute id { xsd:ID }?,
    section-title?,
    dl
}

section-title =
  element title { TextElement* }

content =
  element content { Content-Section }

content-subsection =
  element clause { Content-Section }

Basic-Section =
    attribute id { xsd:ID }?,
    section-title?,
    BasicBlock+, note*

Content-Section =
    attribute id { xsd:ID }?,
    section-title?,
    ( (BasicBlock+, note*) |
      content-subsection+ )

clause =
  element clause { Clause-Section }

Clause-Section =
    attribute id { xsd:ID }?,
    section-title?,
    (
      ( BasicBlock+, note* ) |
       clause-subsection+
    )

clause-subsection =
  element clause { Clause-Section }

annex =
  element annex {
    attribute id { xsd:ID }?,
    attribute obligation { ( "normative" | "informative" ) },
    section-title?,
    ( ( BasicBlock+, note* ) | clause-subsection+ )
}

references =
  element references {
    attribute id { xsd:ID }?,
    section-title?,
    bibitem*
  }

terms =
  element terms {
    attribute id { xsd:ID }?,
    term+
  }

term =
  element term {
    attribute id { xsd:ID }?,
    preferred+, admitted*, deprecates*,
    termdomain?, definition, termnote*, termexample*, termsource*
  }

preferred =
  element preferred { TextElement+ }

admitted =
  element admitted { TextElement+ }

deprecates =
  element deprecates { TextElement+ }

termdomain =
  element domain { TextElement+ }

definition =
  element definition {
    ( paragraph )
  }

termnote =
  element termnote { 
    attribute id { xsd:ID },
paragraph }

termexample =
  element termexample { 
    attribute id { xsd:ID },
paragraph }

termsource =
  element termsource {
    attribute status { ( "identical" | "modified" ) },
    origin, modification?
}

origin =
  element origin { erefType }

modification =
  element modification { paragraph }

BasicBlock =  paragraph-with-footnote | table | formula | admonition | ol | ul | dl | figure |
  quote | sourcecode | example | review | pre

paragraph =
  element p { ParagraphType }

Alignments = ( "left" | "right" | "center" | "justified" )

ParagraphType =
    attribute id { xsd:ID },
    attribute align { Alignments }?,
   ( TextElement )*, note*

paragraph-with-footnote =
  element p {
    attribute id { xsd:ID },
    attribute align { Alignments }?,
   ( TextElement | fn  )*, note*
}

note =
  element note {
    attribute id { xsd:ID },
    paragraph+
  }


review =
  element review {
  attribute id { xsd:ID },
  attribute reviewer { text },
  attribute date { xsd:dateTime }?,
  attribute from { xsd:IDREF },
  attribute to { xsd:IDREF }?,
  paragraph+
}

formula =
  element formula {
    attribute id { xsd:ID },
    stem, dl?, note*
}

quote =
  element quote {
    attribute id { xsd:ID },
    attribute alignment { Alignments }?,
    quote-source?,
    quote-author?,
    paragraph-with-footnote+,
    note*
}

quote-source =
  element source { erefType }

quote-author =
  element author { text }

sourcecode =
  element sourcecode {
    attribute id { xsd:ID },
    tname?, ( text | callout )+, annotation*, note*
  }

pre =
  element pre {
    attribute id { xsd:ID },
    tname?, text, note*
  }

table =
  element table {
    attribute id { xsd:ID },
    tname?, thead?, tbody, tfoot?, table-note*, dl?
  }

tname = element name { text }
thead = element thead { tr }
tfoot = element tfoot { tr }
tbody = element tbody { tr+ }

table-note = element note { paragraph }

tr =
  element tr { ( td | th )+ }

td =
  element td {
    attribute colspan { text }?,
    attribute rowspan { text }?,
    attribute align { "left" | "right" | "center" }?,
    (
      (TextElement )* |
      paragraph-with-footnote+
    )
}

th =
  element th {
    attribute colspan { text }?,
    attribute rowspan { text }?,
    attribute align { "left" | "right" | "center" }?,
    (
      (TextElement )* |
      paragraph-with-footnote+
    )
}

example =
  element example {
    attribute id { xsd:ID },
    ( formula | ul | ol | dl | quote | sourcecode | paragraph-with-footnote )+,
    note*
}

admonition =
  element admonition {
    attribute type { ( "warning" | "note" | "tip" | "important" | "caution" ) },
    attribute id { xsd:ID },
    paragraph-with-footnote*,
    note*
  }

figure =
  element figure {
    attribute id { xsd:ID },
     source?, tname?, (image | figure*), fn*, dl?, note*
  }

TextElement =
  text | em | eref | strong | stem | sub | sup | tt | keyword |
  strike | smallcap | xref | br | hyperlink | hr | pagebreak | bookmark

source = element source { TypedUri }

em = element em { text }
strong = element strong { text }
tt = element tt { text }
keyword = element keyword { text }
sub = element sub { text }
sup = element sup { text }
strike = element strike { text }
smallcap = element smallcap { text }

br = element br { empty }
hr = element hr { empty }
pagebreak = element pagebreak { empty }

# bare ID element, used for referencing arbitrary spans of text
bookmark =
  element bookmark {
  attribute id { xsd:ID },
  empty
}

ReferenceFormat = ( "external" | "inline" | "footnote" | "callout" )

eref =
  element eref { erefType }

erefType = 
    attribute normative { xsd:boolean }?,
    attribute citeas { text },
    attribute type { ReferenceFormat },
    CitationType,
    text

hyperlink =
  element link {
    attribute target { xsd:anyURI },
    attribute type { ReferenceFormat },
    text
}

xref =
  element xref {
     attribute target { xsd:IDREF },
     attribute type { ReferenceFormat },
     text
}

fn =
  element fn {
    attribute reference { text },
    paragraph+
}
# This is xref with fixed @type="footnote", and @target built in as paragraph+
# @reference replaces ReferenceElement/text
# so <fn reference="2"><p>This is a footnote</p></fn>
# corresponds to 
# <eref type="footnote" target="fn2">2</xref> <p id="fn2">This is a footnote</p>

callout =
  element callout {
    attribute target { xsd:IDREF },
    text
  }

# This is xref with fixed @type="callout"; the target by convention is in an annotation in the same source code snippet
# so <callout target="xyz">1</callout>
# corresponds to <xref type="callout" target="xyz">1</xref>

image =
  element image {
    attribute id { xsd:ID },
    attribute src { xsd:anyURI }?,
    attribute imagetype { ("SVG" | "JPEG" | "GIF" | "PNG" | "PDF" ) },
    attribute width { xsd:int | "auto" }?,
    attribute height { xsd:int | "auto" }? 
}

stem =
  element stem {
    attribute type { "MathML" | "AsciiMath" },
    text
}

annotation =
  element annotation {
    attribute id { xsd:ID },
    paragraph
}

ul =
  element ul {
    attribute id { xsd:ID },
    li+, note*
}

li =
  element li { 
    attribute id { xsd:ID }?,
    paragraph-with-footnote+ 
}

ol =
  element ol {
    attribute id { xsd:ID },
    attribute type { ( "roman" | "alphabet" | "arabic" | 
                       "roman_upper" | "alphabet_upper" ) },
    li+, note*
}

dl =
  element dl {
    attribute id { xsd:ID },
    (dt, dd)+, note*
}

dt =
  element dt { TextElement* }

dd =
  element dd { paragraph-with-footnote* }

BibData =
    attribute type { BibItemType }?,
    btitle+, formattedref?, bsource*, docidentifier*, docnumber?, bdate*, contributor*, edition?,
    biblionote*, language*, script*, abstract?, status?, copyright, docrelation*

}
