# instantiations of this grammar may replace leaf strings
# with more elaborated types; e.g. title (text) replaced with
# title-main, title-intro, title-part; type replaced with
# enum.
#
# some renaming at leaf nodes is permissible
#
# obligations can change both from optional to mandatory,
# and from mandatory to optional; optional elements may
# be omitted; freely positioned alternatives may be replaced
# with strict ordering
#
# DO NOT introduce a namespace here. We do not want a distinct namespace
# for these elements, and a distinct namespace for any grammar inheriting
# these elements; we just want one namespace for any child grammars
# of this.

grammar {

start = standard-document

standard-document =
element standard-document {
  # title+, status, creator*, language, script, type?, id*, version?, copyright,
  bibdata,
  version?, sections+
}

bibdata =
  element bibdata { BibliographicItem }

status =
  element status { FormattedString }

language =
  element language { text }
## ISO-639

script =
  element script { text }
## ISO-15924: Latn

version =
  element version {
    edition?, revision-date?, version*
}

edition = element edition { xsd:int }
revision-date = element revision-date { xsd:date }
version = element version { text }

sections =
  element sections {
    ( content | clause | terms | annex | references )+
}

section-title =
  element title { text }

content =
  element content { Content-Section }

content-subsection =
  element subsection { Content-Section }

Content-Section =
    attribute id { xsd:ID }?,
    section-title?,
    ( BasicBlock+ |
      content-subsection+ )

clause =
  element clause { Clause-Section }

Clause-Section =
    attribute id { xsd:ID }?,
    section-title?,
    (
      BasicBlock+ |
       clause-subsection+
    )

clause-subsection =
  element subsection { Clause-Section }

annex =
  element annex {
    attribute id { xsd:ID }?,
    attribute type { ( "normative" | "informative" ) },
    section-title?,
    ( BasicBlock | clause-subsection+ )
}

references =
  element references {
    attribute id { xsd:ID }?,
    section-title?,
    bibitem*
  }

terms =
  element terms {
    attribute id { xsd:ID }?,
    term+
  }

term =
  element term {
    attribute id { xsd:ID }?,
    preferred+, admitted*, deprecates*,
    termdomain?, definition, termnote*, termexample*, termsource*
  }

preferred =
  element preferred { TextElement+ }

admitted =
  element admitted { TextElement+ }

deprecates =
  element deprecates { TextElement+ }

termdomain =
  element domain { TextElement+ }

definition =
  element definition {
    ( paragraph )
  }

termnote =
  element termnote { 
    attribute id { xsd:ID },
paragraph }

termexample =
  element termexample { 
    attribute id { xsd:ID },
BasicBlock }

termsource =
  element termsource {
    attribute status { ( "identical" | "modified" ) },
    origin, modification?
}

origin =
  element origin { CitationType }


modification =
  element modification { paragraph }

BasicBlock =  paragraph-with-footnote | table | note | formula | admonition | ol | ul | dl | figure |
  quote | sourcecode | example 

paragraph =
  element p { ParagraphType }

Alignments = ( "left" | "right" | "center" | "justified" )

ParagraphType =
    attribute id { xsd:ID },
    attribute align { Alignments }?,
   ( TextElement )*, review*

paragraph-with-footnote =
  element p {
    attribute id { xsd:ID },
    attribute align { Alignments }?,
   ( TextElement | fn  )*, review*
}

note =
  element note {
    attribute id { xsd:ID },
    paragraph-with-footnote+
  }


review =
  element review {
  attribute id { xsd:ID },
  attribute reviewer { text }?,
  attribute date { xsd:date }?,
  attribute from { xsd:ID },
  attribute to { xsd:ID },
  paragraph+
}

formula =
  element formula {
    attribute id { xsd:ID },
    stem, dl?
}

quote =
  element quote {
    attribute id { xsd:ID },
    attribute alignment { Alignments }?,
    quote-source?,
    quote-author?,
    paragraph-with-footnote+
}

quote-source =
  element source { CitationType }

quote-author =
  element author { ContributorInfo }

sourcecode =
  element sourcecode {
    attribute id { xsd:ID },
    tname?, ( text | callout )+, annotation*
  }

table =
  element table {
    attribute id { xsd:ID },
    tname?, thead?, tbody, tfoot?, table-note*, dl?
  }

tname = element name { text }
thead = element thead { tr }
tfoot = element tfoot { tr }
tbody = element tbody { tr+ }

table-note = element note { paragraph }

tr =
  element tr { ( td | th )+ }

td =
  element td {
    attribute colspan { text }?,
    attribute rowspan { text }?,
    attribute align { "left" | "right" | "center" }?,
    (
      (TextElement | review )* |
      paragraph-with-footnote+
    )
}

th =
  element th {
    attribute colspan { text }?,
    attribute rowspan { text }?,
    attribute align { "left" | "right" | "center" }?,
    (
      (TextElement | review )* |
      paragraph-with-footnote+
    )
}

example =
  element example {
    attribute id { xsd:ID },
    ( formula | ul | ol | dl | quote | sourcecode | paragraph-with-footnote | 
      review )+
}

admonition =
  element admonition {
    attribute type { ( "warning" | "note" | "tip" | "important" | "caution" ) },
    attribute id { xsd:ID },
    paragraph-with-footnote*
  }

figure =
  element figure {
    attribute id { xsd:ID },
     source?, tname?, ( figure+ |  ( TextElement*, note*, dl? ) )
  }

TextElement =
  text | em | eref | strong | stem | sub | sup | tt |
  strike | smallcap | xref | br | hyperlink | hr | pagebreak | bookmark


em = element em { text }
strong = element strong { text }
tt = element tt { text }
sub = element sub { text }
sup = element sup { text }
strike = element strike { text }
smallcap = element smallcap { text }

br = element br { empty }
hr = element hr { empty }
pagebreak = element pagebreak { empty }

# bare ID element, used for referencing arbitrary spans of text
bookmark =
  element bookmark {
  attribute id { xsd:ID },
  empty
}

ReferenceFormat = ( "external" | "inline" | "footnote" | "callout" )

eref =
  element eref {
    attribute normative { xsd:boolean }?,
    attribute citeas { text },
    attribute type { ReferenceFormat },
    CitationType,
    text
}

hyperlink =
  element link {
    attribute target { xsd:anyURI },
    attribute type { ReferenceFormat },
    text
}

xref =
  element xref {
     attribute target { xsd:IDREF },
     attribute type { ReferenceFormat },
     text
}

fn =
  element fn {
    attribute reference { text },
    paragraph+
}
# This is xref with fixed @type="footnote", and @target built in as paragraph+
# @reference replaces ReferenceElement/text
# so <fn reference="2"><p>This is a footnote</p></fn>
# corresponds to 
# <xref type="footnote" target="fn2">2</xref> <p id="fn2">This is a footnote</p>

callout =
  element callout {
    attribute target { xsd:IDREF },
    text
  }

# This is xref with fixed @type="callout"; the target by convention is in an annotation in the same source code snippet
# so <callout target="xyz">1</callout>
# corresponds to <xref type="callout" target="xyz">1</xref>

image =
  element image {
    attribute id { xsd:ID },
    attribute src { xsd:anyURI }?,
    attribute imagetype { ("SVG" | "JPEG" | "GIF" | "PNG" | "PDF" ) },
    attribute width {xsd:int}?,
    attribute height {xsd:int}? 
}

stem =
  element stem {
    attribute type { "MathML" | "AsciiMath" },
    text
}

annotation =
  element annotation {
    attribute id { xsd:ID },
    paragraph
}

ul =
  element ul {
    attribute id { xsd:ID },
    li+
}

li =
  element li { paragraph-with-footnote+ }

ol =
  element ol {
    attribute id { xsd:ID },
    attribute type { ( "roman" | "alphabet" | "arabic" | 
                       "roman_upper" | "alphabet_upper" ) },
    li+
}

dl =
  element dl {
    attribute id { xsd:ID },
    (dt, dd)+
}

dt =
  element dt { TextElement }

dd =
  element dd { paragraph-with-footnote* }

LocalizedString =
  # multiple languages and scripts possible: comma delimit them if so
  attribute language { text }?,
  attribute script { text }?,
  text 

# Unlike UML, change type to format: type is overloaded
# Would be need if plain were default value and could omit the attribute
# Added LocalizedStringOrXsAny
FormattedString =
  attribute format { ( "plain" | "html" | "docbook" | "tei" | "asciidoc" | "markdown" ) },
  LocalizedStringOrXsAny

LocalizedStringOrXsAny =
  # multiple languages and scripts possible: comma delimit them if so
  attribute language { text }?,
  attribute script { text }?,
  ( text | Any )+


contributor = 
  element contributor {
    role*,
    ContributorInfo
}

role =
  element role {
    attribute type { ( "author" | "edition" | "publisher" | text ) }?,
    roledescription*
}

ContributorInfo =
  ( person | organization )

roledescription = 
  element description { FormattedString }

person = 
  element person {
    fullname?, affiliation*, person-identifier*, contact*, uri?
}

fullname =
  element name {
    prefix*, forename*, initial*, surname, addition*
}

prefix = element prefix { LocalizedString }
initial = element initial { LocalizedString }
addition = element addition { LocalizedString }
surname = element surname { LocalizedString }
forename = element forename { LocalizedString }

# Unlike UML, affiliationname is optional
affiliation =
  element affiliation { 
    affiliationname?, affiliationdescription*, organization
}

affiliationname = element name { LocalizedString }

affiliationdescription = element description { FormattedString }

organization = 
  element organization {
    orgname, uri?, org-identifier*, contact*
}

orgname =
  element name { LocalizedString }

uri =
  element uri { xsd:anyURI }

# TODO may change
contact =
  ( address | phone | email | uri )

phone = element phone { text }
email = element email { text }

address =
  element address {
    # iso191606 TODO
    street+, city, state?, country, postcode?
}

street = element street { text }
city = element city { text }
state = element state { text }
country = element country { text }
postcode = element postcode { text }

person-identifier =
  element identifier {
    attribute type { ("isni" | "uri") },
    text
  }

org-identifier =
  element identifier {
    attribute type { ("orcid" | "uri") },
    text
  }

citation =
  element citation { CitationType }

CitationType = 
    attribute bibitemid { xsd:IDREF },
    locality*, date?

date = element date { ( xsd:gYear | xsd:date )  }

locality =
  element locality {
    attribute type { ( "section" | "clause" | "part" | "paragraph" | 
                       "chapter" | "page" | "whole" ) },
    localityreference*
}

localityreference = element reference { text }

# unlike UML, has id attribute; that results from including bibitem in a docmodel
bibitem =
  element bibitem { 
     attribute id { xsd:ID },
     BibliographicItem 
}

# unlike UML, bname is optional, mutually exclusive with formattedRef
# unlike UML, copyright is optional (it is mandatory in bibdata)
BibliographicItem =
     attribute type { "article" | "book" | "booklet" | "conference" | "manual" |
                      "proceedings" | "presentation" | "thesis" | "techreport" |
                      "standard" | "unpublished" }?,
    (btitle+ | formattedref), source?, docidentifier*, bdate*, contributor*, 
    edition?,
    biblionote*, partof*, language*, script*, abstract?, status?, copyright?

btitle = element title { FormattedString }
formattedref = element formattedref { TextElement+ }
source = element source { xsd:anyURI }
bdate = element date {
  attribute type { ( "published" | "accessed" | "created" | "activated" | "obsoleted" ) },
  ( xsd:gYear | xsd:date )
}

# add type to docidentifier in isodoc?
docidentifier = element docidentifier { text }
biblionote = element note { FormattedString }
abstract = element abstract { FormattedString }

partof = element partof { BibliographicItem }

copyright =
  element copyright {
    from, to?, owner
}

from = element from { xsd:gYear }
to = element to { xsd:gYear }

owner =
  element owner { ContributorInfo }

Anycontents = mixed {
# https://github.com/relaxng/jing-trang/issues/211
# https://lists.oasis-open.org/archives/office/200808/msg00024.html
# https://lists.oasis-open.org/archives/office/200808/msg00099.html
# For this to work, we will actually strip any attributes in the Anycontents before
# passing it for validation. Horrible I know, but there are no good alternatives
# that also allow us to do grammar inheritance
	# (attribute * { text } | Any)*
        Any*
}
Any = element * { Anycontents }


}
