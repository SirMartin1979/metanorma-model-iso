# instantiations of this grammar may replace leaf strings
# with more elaborated types; e.g. title (text) replaced with
# title-main, title-intro, title-part; type replaced with
# enum.
#
# some renaming at leaf nodes is permissible
#
# obligations can change both from optional to mandatory,
# and from mandatory to optional; optional elements may
# be omitted; freely positioned alternatives may be replaced
# with strict ordering
#
# DO NOT introduce a namespace here. We do not want a distinct namespace
# for these elements, and a distinct namespace for any grammar inheriting
# these elements; we just want one namespace for any child grammars
# of this.

grammar {

include "reqt.rnc" { }

#include "biblio.rnc" { }

include "basicdoc.rnc" { 

start = standard-document

BibDataExtensionType = 
  doctype,
  structuredidentifier*

TitleType = text

sections =
  element sections {
    ( clause | terms | definitions )+
}

references =
  element references {
    attribute id { xsd:ID }?,
    section-title?,
    BasicBlock*,
    (bibitem, note*)*
  }

}


standard-document =
element standard-document {
  bibdata, boilerplate?, preface?, sections, annex*, references*
}

preface =
  element preface { ( content | abstract | foreword | introduction | acknowledgements)+ }

foreword =
  element foreword { Content-Section }

introduction =
  element introduction { Content-Section }

boilerplate = 
  element boilerplate { copyright-statement?, license-statement?, legal-statement?, feedback-statement? }

copyright-statement =
  element copyright-statement { Content-Section }

license-statement =
  element license-statement { Content-Section }

legal-statement =
  element legal-statement { Content-Section }

feedback-statement =
  element feedback-statement { Content-Section }

definitions =
  element definitions {
    attribute id { xsd:ID }?,
    attribute language { text }?,
    attribute script { text }?,
    section-title?,
    (BasicBlock*,
    dl)+
}

content =
  element clause { Content-Section }

abstract =
  element abstract { Content-Section }

acknowledgements =
  element acknowledgements { Content-Section }

content-subsection =
  element clause { 
    attribute type { text }?,
    Content-Section 
  }

Content-Section =
    attribute id { xsd:ID }?,
    attribute language { text }?,
    attribute script { text }?,
    section-title?,
    ( (BasicBlock*, note*) |
      content-subsection+ )

clause =
  element clause { 
    attribute type { text }?,
    Clause-Section 
  }

Clause-Section =
    attribute id { xsd:ID }?,
    attribute language { text }?,
    attribute script { text }?,
    section-title?,
    (
      ( BasicBlock*, note* ) |
       (clause-subsection | terms | definitions)+
    )

clause-subsection =
  element clause { Clause-Section }

annex =
  element annex {
    attribute id { xsd:ID }?,
    attribute language { text }?,
    attribute script { text }?,
    attribute obligation { ( "normative" | "informative" ) },
    section-title?,
    ( ( BasicBlock*, note* ) | clause-subsection+ )
}

terms =
  element terms {
    attribute id { xsd:ID }?,
    attribute language { text }?,
    attribute script { text }?,
    BasicBlock*,
    term+
  }

term =
  element term {
    attribute id { xsd:ID }?,
    preferred+, admitted*, related*, deprecates*,
    termdomain?, termgrammar*, definition, termnote*, termexample*, termsource*
  }

preferred =
  element preferred { TextElement+ }

admitted =
  element admitted { TextElement+ }

related = 
  element related {
    attribute type { "compare" | "contrast" | "see" }?,
    TextElement+
}

deprecates =
  element deprecates { TextElement+ }

termdomain =
  element domain { TextElement+ }

termgrammar =
  element grammar { TextElement+ }

definition =
  element definition {
    ( paragraph )
  }

termnote =
  element termnote { 
    attribute id { xsd:ID },
paragraph }

termexample =
  element termexample { 
    attribute id { xsd:ID },
paragraph }

termsource =
  element termsource {
    attribute status { ( "identical" | "modified" ) },
    origin, modification?
}

origin =
  element origin { erefType }

modification =
  element modification { paragraph }

structuredidentifier = element structuredidentifier {
  attribute type { text }?,
  element agency { text }+,
  element class { text }?,
  element docnumber { text },
  element partnumber { text }?,
  element edition { text }?,
  element version { text }?,
  element supplementtype { text }?,
  element supplementnumber { text }?,
  element language { text }?,
  element year { text }?
}

}
